<?xml version="1.0" encoding="UTF-8"?>
<gretl-functions>
<gretl-function-package name="Imputer" minver="2021d">
<author email="atecon@posteo.de">Artur Tarassow</author>
<version>0.1</version>
<date>2023-02-05</date>
<description>Impute missing values</description>
<tags>C10</tags>
<help>
This package offers various methods for imputing missing values, either in
cross-sectional, time-series or panel data sets.

Please report bugs or comments on the gretl mailing list or write to
atecon@posteo.de.


Public function
===============

impute(const series y, const string method)
========
Call method for imputing missing values of series &quot;y&quot;.

Parameters:
-----------
y       -- series, target on which to impute missing values
method  -- string, method (or strategy) by which to impute missing values.
           Note, in case of a panel dataset, the method is applied to each
           cross-sectional unit separately. The following methods are supported

  &quot;min&quot;:    Replace missing values using the minimum of 'y'
  &quot;max&quot;:    Replace missing values using the maximum of 'y'
  &quot;mean&quot;:   Replace missing values using the mean value of 'y'
  &quot;median&quot;: Replace missing values using the median value of 'y'
  &quot;cum&quot;:    Replace missing values using the cumulated value of 'y'
  &quot;mode&quot;:   Replace missing values using the most frequent value of 'y'
            &quot;first&quot;: Replace missing values using the first valid
            observation value of 'y'
  &quot;last&quot;:   Replace missing values using the last valid observation value of
            'y'

Returns:
--------
Original series 'y' but with replaced missing values.



impute_by_sts(const series y, bundle opts[null])
========
Impute missing values of 'y' by means of a structural time-series model (using
the 'StrucTiSM' package). For details see the manual of the 'StrucTiSM'
package. Works only on time-series dataset.

Parameters:
-----------
y       -- series, target on which to impute missing values
opts    -- bundle, Optional key-value pairs can be passed to determine the
           type of components which are passed to the STSM_setup() function:
             &quot;seasonal&quot; (default 2 = stochastic with dummies)
               Other value(s): 0 = none, 1 = stochastic with trigonometric
                 terms, 3 = deterministic dummies
             &quot;slope&quot; (default: 1 = stochastic)
               Other value(s): 0 = none, 2 = deterministic
             &quot;trend&quot; (default: 1 = stochastic)
               Other value(s): 2 = deterministic
             &quot;irregular&quot; (default: 1(=TRUE) = with irregular component)
               Other value(s): 0(=FALSE) = without irregular component

Returns:
--------
Original series 'y' but with replaced missing values.


first(const series y)
========
Compute first valid value for cross-sectional and time-series datasets,
respectively. In case of a panel dataset, the first valid value of each panel
unit is obtained instead (equivalent to the pfirst() function of the
&quot;PanelTools&quot; package).

Parameters:
-----------
y       -- series, target series

Returns:
--------
Series with the first valid value of &quot;y&quot; (for each cross-sectional in case of
a panel dataset). If no valid values exists for a unit, NA is returned.


last(const series y)
========
Compute last valid value for cross-sectional and time-series datasets,
respectively. In case of a panel dataset, the last valid value of each panel
unit is obtained instead (equivalent to the plast() function of the
&quot;PanelTools&quot; package).

Parameters:
-----------
y       -- series, target series

Returns:
--------
Series with the last valid value of &quot;y&quot; (for each cross-sectional in case of a
panel dataset). If no valid values exists for a unit, NA is returned.


Changelog:
----------
Version 0.1 (February 2023):
  - Initial version
</help>
<depends count="3">
extra PanelTools StrucTiSM </depends>
<gretl-function name="first" type="series">
 <params count="1">
  <param name="y" type="series" const="true"/>
 </params>
<code>/* Compute first valid value for each panel unit. Expand this constant value for each unit to a series. */
series ret = helper_first_last(y, FALSE)
string desc = get_description(&quot;first&quot;, argname(y), -1)
setinfo ret --description=&quot;@desc&quot;
return ret
</code>
</gretl-function>
<gretl-function name="impute" type="series">
 <params count="2">
  <param name="y" type="series" const="true"/>
  <param name="method" type="string" const="true"/>
 </params>
<code>/* Public function for imputing missing values of 'y' by some 'method'.
return: series, imputed series. */
if $datatype == 3
  pkg query PanelTools --quiet
  if $result.version &lt; 0.4
    funcerr &quot;At least version 0.4 of the 'PanelTools' package must be installed.&quot;
  endif
endif
string datatype = $datatype == 3 ? &quot;panel&quot; : &quot;else&quot;
# Get mapped function parameters - also depends on datatype
bundle Func = method_to_function_map(method)[&quot;@datatype&quot;]
if Func.dtype == &quot;series&quot;
  series ret = missing(y) ? feval(Func.method, y) : y
else
  funcerr &quot;Case not covered, yet.&quot;
endif
return ret
</code>
</gretl-function>
<gretl-function name="impute_by_sts" type="series">
 <params count="2">
  <param name="y" type="series" const="true">
<description>Target series</description>
  </param>
  <param name="self" type="bundle" optional="true">
<description>Optional parameters</description>
  </param>
 </params>
<code>/* Impute missing values by means of an basic structural time-series model.
Dependency: StrucTiSM.gfn */
errorif($datatype != 2, &quot;Works only on time-series dataset.&quot;)
if $datatype == 2
  pkg query StrucTiSM --quiet
  if $result.version &lt; 0.7
    funcerr &quot;At least version 0.7 of the 'StrucTiSM' package must be installed.&quot;
  endif
endif
series y_filled = NA
bundle defaults = sts_default_values()
if exists(self)
  self = self + defaults # over-write defaults
else
  self = defaults
endif
bundle Mod = STSM_setup(y, self.irregular, self.trend, self.slope, self.seasonal)
STSM_estimate(&amp;Mod)
list components = STSM_components(Mod)
errorif(nelem(components) == 0, &quot;Error: Failed to estimate model parameters.&quot;)
series y_filled = ok(y) ? y : y_level + y_seas
return y_filled
</code>
</gretl-function>
<gretl-function name="last" type="series">
 <params count="1">
  <param name="y" type="series" const="true"/>
 </params>
<code>/* Compute last valid value for each panel unit. Expand this constant value for each unit to a series. */
series ret = helper_first_last(y, TRUE)
string desc = get_description(&quot;last&quot;, argname(y), -1)
setinfo ret --description=&quot;@desc&quot;
return ret
</code>
</gretl-function>
<gretl-function name="mode" type="series">
 <params count="1">
  <param name="y" type="series" const="true"/>
 </params>
<code>/* Compute most frequent value for each cross-sectional unit.
return: series, constant value for each cross-sectional unit.
Dependency: extra.gfn */
errorif(!nobs(y), &quot;No valid observations.&quot;)
set skip_missing off
scalar N = get_number_of_cross_units()
scalar T = get_number_of_time_periods()
matrix m = mshape({y}, T, N)
matrix mat = mshape(NA, N, 1)
loop i=1..N
  mat[i] = onemode(m[,i])[1]
endloop
set skip_missing on
series ret = $datatype == 3 ? pexpand(mat) : mat
string desc = get_description(&quot;mode&quot;, argname(y), -1)
setinfo ret --description=&quot;@desc&quot;
return ret
</code>
</gretl-function>
<gretl-function name="method_to_function_map" type="bundle" private="1">
 <params count="1">
  <param name="method" type="string" const="true"/>
 </params>
<code>/* Mapping method to function name being called.
return: string, Function name being called. */
bundle Map = null
Map.min = _( panel = _(method = &quot;pmin&quot;, dtype = &quot;series&quot;), else = _(method = &quot;min&quot;, dtype = &quot;series&quot;) )
Map.max = _( panel = _(method = &quot;pmax&quot;, dtype = &quot;series&quot;), else = _(method = &quot;max&quot;, dtype = &quot;series&quot;) )
Map.mean = _( panel = _(method = &quot;pmean&quot;, dtype = &quot;series&quot;), else = _(method = &quot;mean&quot;, dtype = &quot;series&quot;) )
Map.median = _( panel = _(method = &quot;pmedian&quot;, dtype = &quot;series&quot;), else = _(method = &quot;median&quot;, dtype = &quot;series&quot;) )
Map.cum = _( panel = _(method = &quot;cum&quot;, dtype = &quot;series&quot;), else = _(method = &quot;cum&quot;, dtype = &quot;series&quot;) )
Map.mode = _( panel = _(method = &quot;pmode&quot;, dtype = &quot;series&quot;), else = _(method = &quot;mode&quot;, dtype = &quot;series&quot;) )
Map.first = _( panel = _(method = &quot;pfirst&quot;, dtype = &quot;series&quot;), else = _(method = &quot;first&quot;, dtype = &quot;series&quot;) )
Map.last = _( panel = _(method = &quot;plast&quot;, dtype = &quot;series&quot;), else = _(method = &quot;last&quot;, dtype = &quot;series&quot;) )
return Map[&quot;@method&quot;]
</code>
</gretl-function>
<gretl-function name="get_number_of_cross_units" type="scalar" private="1">
<code>/* Return number of cross-sectional units. In case of time-series and cross-sectional data, set N = 1.
return: int, number of cross-sectional units. */
return $datatype == 3 ? ($nobs / $pd) : 1
</code>
</gretl-function>
<gretl-function name="get_number_of_time_periods" type="scalar" private="1">
<code>/* Return number of time-periods. In case of cross-sectional data, T=1.
return: int, number of time-periods. */
if $datatype == 1
  return 1
elif $datatype == 2
  return $nobs
elif $datatype == 3
  return $pd
else
  funcerr &quot;Data type not supported.&quot;
endif
</code>
</gretl-function>
<gretl-function name="helper_first_last" type="series" private="1">
 <params count="2">
  <param name="y" type="series" const="true"/>
  <param name="do_last" type="bool" const="true"/>
 </params>
<code>/* Wrapper for first() and last()
return: series, respective values. */
set skip_missing off
scalar N = get_number_of_cross_units()
scalar T = get_number_of_time_periods()
matrix m = mshape({y}, T, N)
matrix ret = mshape(NA, N, 1)
loop i=1..N
  matrix mask = ok(m[,i])
  matrix vals = selifr(m[,i], mask)
  scalar idx = do_last == TRUE ? rows(vals) : 1
  ret[i] = sum(mask) ? vals[idx] : NA
endloop
set skip_missing on
return $datatype == 3 ? pexpand(ret) : ret
</code>
</gretl-function>
<gretl-function name="sts_default_values" type="bundle" private="1">
<code>/* Default values of STS model. */
bundle B = null
# seasonal: 0 = none, 1 = stochastic with trigonometric terms,
# 2 = stochastic with dummies, 3 = deterministic dummies
B.seasonal = 2
# slope 0 = none, 1 = stochastic, 2 = deterministic
B.slope = 1
# type of trend: 1 = stochastic, 2 = deterministic
B.trend = 1
B.irregular = TRUE
return B
</code>
</gretl-function>
<gretl-function name="get_description" type="string" private="1">
 <params count="3">
  <param name="fname" type="string" const="true"/>
  <param name="yname" type="string" const="true"/>
  <param name="value" type="scalar"/>
 </params>
<code>/* Retrieve series' description.
return: string */
scalar value = !exists(value) ? 1 : value
bundle B
B.ppolyfit = sprintf(&quot;polynomial fit of %s (order=%d)&quot;, yname, value)
B.cum = sprintf(&quot;cumuluated values of %s&quot;, yname)
B.pcum = sprintf(&quot;cumuluated values of %s&quot;, yname)
B.pquantile = sprintf(&quot;quantile (q=%g) values of %s&quot;, value, yname)
B.pxfraction = sprintf(&quot;cross-sectional fractions of %s (value=%g)&quot;, yname, value)
B.first = sprintf(&quot;first valid values of %s&quot;, yname)
B.last = sprintf(&quot;last valid values of %s&quot;, yname)
B.mode = sprintf(&quot;mode of %s&quot;, yname)
B.median = sprintf(&quot;median of %s&quot;, yname)
B.pxmean = sprintf(&quot;cross-sectional means of %s&quot;, yname)
return B[&quot;@fname&quot;]
</code>
</gretl-function>
<sample-script>
clear
set verbose off
include Imputer.gfn

# This is how it works for panel datasets
nulldata 12 --preserve
setobs 3 1:1 --stacked-time-series
series y = {1; 2; 3;\
            4; NA; 6;\
            NA; 8; 1;\
            NA; -12; NA\
            }

print &quot;Impute by method&quot;
series y_first = impute(y, &quot;first&quot;)
series y_last = impute(y, &quot;last&quot;)
series y_mode = impute(y, &quot;mode&quot;)
series y_min = impute(y, &quot;min&quot;)
print y y_first y_last y_mode y_min -o


# Construct a toy time-series dataset
nulldata 4 --preserve
setobs 4 &quot;2020:1&quot; --time-series
series y = {1, NA, 3, NA}'
series x = {1, 2, 2, NA}'

print &quot;Impute by minimum&quot;
eval impute(y, &quot;min&quot;)

print &quot;Impute by maximum&quot;
eval impute(y, &quot;max&quot;)

print &quot;Impute by first valid value&quot;
eval impute(y, &quot;first&quot;)

print &quot;Impute by last valid value&quot;
eval impute(y, &quot;last&quot;)

print &quot;Impute by mean valid value&quot;
eval impute(y, &quot;mean&quot;)

print &quot;Impute by median valid value&quot;
eval impute(y, &quot;median&quot;)

print &quot;Impute by most frequent value&quot;
eval impute(x, &quot;mode&quot;)


# Replace missing values of time-series by STS model
# from the &quot;StrucTiSM&quot; package
open bjg.gdt --quiet --preserve
# Impose some missing values
gappy = lg
smpl 1954:3 1955:6
gappy = NA
smpl full
# assume a deterministic trend (optional)
series filled = impute_by_sts(gappy, _(trend = 2))
# Comparison
gnuplot lg filled --with-lines --time-series --output=display
</sample-script>
</gretl-function-package>
</gretl-functions>
