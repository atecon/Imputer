set verbose off
clear

set assert stop
#include assertion.gfn
include extra.gfn
include PanelTools.gfn

include "./src/Imputer.inp" --force


function scalar any_not_equal (const series y, const series x)
    set skip_missing off

    print y x -o
    matrix d = {y} - {x}
    d
    matrix mask = (d .!= 0) ? TRUE : FALSE
    mask

    set skip_missing on

    return sum(mask)
end function



nulldata 4 --preserve
setobs 4 "2020:1" --time-series

series y1 = {1, 2, 3, 4}'
series y2 = {NA, 2, 3, 4}'
series y3 = {NA, NA, 3, 4}'
series y4 = {1, 2, 3, NA}'
series y5 = {1, 2, NA, NA}'
series y6 = {1, NA, 3, NA}'
series y7 = {NA, NA, NA, NA}'


bundles Params = null
Params = Params + _(input = "y1", method = "min", expected = {1, 2, 3, 4}')
Params = Params + _(input = "y2", method = "min", expected = {2, 2, 3, 4}')
Params = Params + _(input = "y3", method = "min", expected = {3, 3, 3, 4}')
Params = Params + _(input = "y4", method = "min", expected = {1, 2, 3, 1}')
Params = Params + _(input = "y5", method = "min", expected = {1, 2, 1, 1}')
Params = Params + _(input = "y6", method = "min", expected = {1, 1, 3, 1}')
Params = Params + _(input = "y7", method = "min", expected = {NA, NA, NA, NA}')


function void test_min (const bundles P, const list L)
    print "Start testing function impute() with 'min'."

    loop foreach i P
        # Given
        string name = P[i].input
        series y = L.@name
        series expected = P[i].expected

        # When
        series actual = impute(y, P[i].method)

        # Then
        assert(any_not_equal(actual, expected) == FALSE)
    endloop
end function

test_min(Params, dataset)



print "Finished all tests succesfully."
quit
