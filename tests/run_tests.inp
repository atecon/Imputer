set verbose off
clear

set assert stop
include extra.gfn
include StrucTiSM.gfn

include "./src/Imputer.inp" --force


function scalar any_equal (const series y, const series x)
    /* Check two series for equality.
    return: scalar, TRUE if all entries are equal; this also includes the case where for both series all entries are NA. In case, the series have unequal entries at the i-th position, return FALSE. */

    scalar y_all_na = sum(missing(y) == TRUE) ? TRUE : FALSE
    scalar x_all_na = sum(missing(x) == TRUE) ? TRUE : FALSE
    series difference = FALSE

    if y_all_na == FALSE && x_all_na == FALSE
        series d = abs(y - x)
        series difference = (d == 0) ? FALSE : TRUE
    endif

    return (sum(difference) == 0 ? TRUE : FALSE)
end function



# ================== TIME-SERIES ============================


nulldata 4 --preserve
setobs 4 "2020:1" --time-series

series y1 = {1, 2, 3, 4}'
series y2 = {NA, 2, 3, 4}'
series y3 = {NA, NA, 3, 4}'
series y4 = {1, 2, 3, NA}'
series y5 = {1, 2, NA, NA}'
series y6 = {1, NA, 3, NA}'
series y7 = {NA, NA, NA, NA}'


bundles Params = null
Params = Params + _(input = "y1", method = "min", expected = {1, 2, 3, 4}')
Params = Params + _(input = "y2", method = "min", expected = {2, 2, 3, 4}')
Params = Params + _(input = "y3", method = "min", expected = {3, 3, 3, 4}')
Params = Params + _(input = "y4", method = "min", expected = {1, 2, 3, 1}')
Params = Params + _(input = "y5", method = "min", expected = {1, 2, 1, 1}')
Params = Params + _(input = "y6", method = "min", expected = {1, 1, 3, 1}')
Params = Params + _(input = "y7", method = "min", expected = {NA, NA, NA, NA}')


function void test_min (const bundles P, const list L)
    print "Start testing function impute() with 'min'."

    loop foreach i P
        # Given
        string name = P[i].input
        series y = L.@name
        series expected = P[i].expected

        # When
        series actual = impute(y, P[i].method)

        series d = actual - expected

        # Then
        assert(any_equal(actual, expected) == TRUE)
    endloop
end function
test_min(Params, dataset)

bundles Params = null
Params = Params + _(input = "y1", method = "max", expected = {1, 2, 3, 4}')
Params = Params + _(input = "y2", method = "max", expected = {4, 2, 3, 4}')
Params = Params + _(input = "y3", method = "max", expected = {4, 4, 3, 4}')
Params = Params + _(input = "y4", method = "max", expected = {1, 2, 3, 3}')
Params = Params + _(input = "y5", method = "max", expected = {1, 2, 2, 2}')
Params = Params + _(input = "y6", method = "max", expected = {1, 3, 3, 3}')
Params = Params + _(input = "y7", method = "max", expected = {NA, NA, NA, NA}')
function void test_max (const bundles P, const list L)
    print "Start testing function impute() with 'max'."

    loop foreach i P
        # Given
        string name = P[i].input
        series y = L.@name
        series expected = P[i].expected

        # When
        series actual = impute(y, P[i].method)

        # Then
        assert(any_equal(actual, expected) == TRUE)
    endloop
end function
test_max(Params, dataset)


bundles Params = null
Params = Params + _(input = "y1", method = "first", expected = {1, 2, 3, 4}')
Params = Params + _(input = "y2", method = "first", expected = {2, 2, 3, 4}')
Params = Params + _(input = "y3", method = "first", expected = {3, 3, 3, 4}')
Params = Params + _(input = "y4", method = "first", expected = {1, 2, 3, 1}')
Params = Params + _(input = "y5", method = "first", expected = {1, 2, 1, 1}')
Params = Params + _(input = "y6", method = "first", expected = {1, 1, 3, 1}')
Params = Params + _(input = "y7", method = "first", expected = {NA, NA, NA, NA}')
function void test_first (const bundles P, const list L)
    print "Start testing function impute() with 'first'."

    loop foreach i P
        # Given
        string name = P[i].input
        series y = L.@name
        series expected = P[i].expected

        # When
        series actual = impute(y, P[i].method)

        # Then
        assert(any_equal(actual, expected) == TRUE)
    endloop
end function
test_first(Params, dataset)


bundles Params = null
Params = Params + _(input = "y1", method = "last", expected = {1, 2, 3, 4}')
Params = Params + _(input = "y2", method = "last", expected = {4, 2, 3, 4}')
Params = Params + _(input = "y3", method = "last", expected = {4, 4, 3, 4}')
Params = Params + _(input = "y4", method = "last", expected = {1, 2, 3, 3}')
Params = Params + _(input = "y5", method = "last", expected = {1, 2, 2, 2}')
Params = Params + _(input = "y6", method = "last", expected = {1, 3, 3, 3}')
Params = Params + _(input = "y7", method = "last", expected = {NA, NA, NA, NA}')
function void test_last (const bundles P, const list L)
    print "Start testing function impute() with 'last'."

    loop foreach i P
        # Given
        string name = P[i].input
        series y = L.@name
        series expected = P[i].expected

        # When
        series actual = impute(y, P[i].method)

        # Then
        assert(any_equal(actual, expected) == TRUE)
    endloop
end function
test_last(Params, dataset)


nulldata 4 --preserve
setobs 4 "2020:1" --time-series

series y1 = {1, 2, 2, 3}'
series y2 = {NA, 2, 2, 3}'
series y3 = {NA, NA, 3, 3}'
series y4 = {1, 2, 2, NA}'
series y5 = {1, 2, NA, NA}'
series y6 = {1, NA, 2, NA}'
series y7 = {NA, NA, NA, NA}'


bundles Params = null
Params = Params + _(input = "y1", method = "mode", expected = {1, 2, 2, 3}')
Params = Params + _(input = "y2", method = "mode", expected = {2, 2, 2, 3}')
Params = Params + _(input = "y3", method = "mode", expected = {3, 3, 3, 3}')
Params = Params + _(input = "y4", method = "mode", expected = {1, 2, 2, 2}')
Params = Params + _(input = "y5", method = "mode", expected = {1, 2, 1, 1}')
Params = Params + _(input = "y6", method = "mode", expected = {1, 1, 2, 1}')


function void test_mode (const bundles P, const list L)
    print "Start testing function impute() with 'mode'."

    loop foreach i P
        # Given
        string name = P[i].input
        series y = L.@name
        series expected = P[i].expected

        # When
        series actual = impute(y, P[i].method)

        # Then
        if nobs(actual) && nobs(expected)
            assert(any_equal(actual, expected) == TRUE)
        else
            funcerr "Either actual or expected has no valid obs."
        endif
    endloop
end function
test_mode(Params, dataset)


nulldata 4 --preserve
assert(get_number_of_cross_units() == 1)
nulldata 4 --preserve
setobs 7 "2020-01-01" --time-series
assert(get_number_of_cross_units() == 1)
nulldata 12 --preserve
setobs 3 1:1 --stacked-time-series
assert(get_number_of_cross_units() == 4)


nulldata 4 --preserve
assert(get_number_of_time_periods() == 1)
nulldata 4 --preserve
setobs 7 "2020-01-01" --time-series
assert(get_number_of_time_periods() == $nobs)
nulldata 12 --preserve
setobs 3 1:1 --stacked-time-series
assert(get_number_of_time_periods() == $pd)


# ================== PANEL ============================

nulldata 20 --preserve
setobs 4 1:1 --stacked-time-series
series y = {1; 2; 2; 3;\
            4; NA; 6; 1;\
            NA; 8; 1; 2;\
            NA; -12; NA; 12;\
            NA; NA; NA; NA\
            }

bundle Param = _(method = "min")
matrix Param.expected = {1, 2, 2, 3}' | {4, 1, 6, 1}' | {1, 8, 1, 2}' |\
                        {-12, -12, -12, 12}' | {NA, NA, NA, NA}'

function void test_pmin (const bundle P, const series y)
    print "Start testing function impute() with 'min' for panels."

    # Given
    series expected = P.expected

    # When
    series actual = impute(y, P.method)

    # Then
    assert(any_equal(actual, expected) == TRUE)
end function
test_pmin(Param, y)


bundle Param = _(method = "max")
matrix Param.expected = {1, 2, 2, 3}' | {4, 6, 6, 1}' | {8, 8, 1, 2}' |\
                        {-12, -12, -12, 12}' | {NA, NA, NA, NA}'

function void test_pmax (const bundle P, const series y)
    print "Start testing function impute() with 'max' for panels."

    # Given
    series expected = P.expected

    # When
    series actual = impute(y, P.method)

    # Then
    assert(any_equal(actual, expected) == TRUE)
end function
test_pmax(Param, y)


bundle Param = _(method = "mean")
matrix Param.expected = {1, 2, 2, 3}' | {4, 11/3, 6, 1}' | {11/3, 8, 1, 2}' |\
                        {-12, -12, -12, 12}' | {NA, NA, NA, NA}'

function void test_pmean (const bundle P, const series y)
    print "Start testing function impute() with 'mean' for panels."

    # Given
    series expected = P.expected

    # When
    series actual = impute(y, P.method)

    # Then
    assert(any_equal(actual, expected) == TRUE)
end function
test_pmean(Param, y)


bundle Param = _(method = "last")
matrix Param.expected = {1, 2, 2, 3}' | {4, 2, 6, 1}' | {2, 8, 1, 2}' |\
                        {-12, -12, -12, 12}' | {NA, NA, NA, NA}'

function void test_plast (const bundle P, const series y)
    print "Start testing function impute() with 'last' for panels."

    # Given
    series expected = P.expected

    # When
    series actual = impute(y, P.method)

    series d = actual - expected
    print d -o

    # Then
    eval any_equal(actual, expected)
    assert(any_equal(actual, expected) == TRUE)
end function
#test_plast(Param, y)


bundle Param = _(method = "first")
matrix Param.expected = {1, 2, 2, 3}' | {4, 4, 6, 1}' | {8, 8, 1, 2}' |\
                        {-12, -12, -12, 12}' | {NA, NA, NA, NA}'

function void test_pfirst (const bundle P, const series y)
    print "Start testing function impute() with 'first' for panels."

    # Given
    series expected = P.expected

    # When
    series actual = impute(y, P.method)

    # Then
    assert(any_equal(actual, expected) == TRUE)
end function
#test_pfirst(Param, y)




# ================== STS ON TIME-SERIES ============================

open bjg.gdt --quiet

function void test_impute_by_sts (const series y)
    print "Start testing function impute_by_sts() using default values."

    # Given
    target = y
    smpl 1954:3 1955:6
    target = NA
    smpl full
    scalar expected_n_missings = 0

    # When
    series ret = impute_by_sts(y, _(trend = 2))
    scalar actual = sum(missing(ret))

    # Then
    assert(actual == expected_n_missings)
end function
test_impute_by_sts(lg)



print "Finished all tests succesfully."
quit
